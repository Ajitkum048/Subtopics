import React from "react";
import subject from "./subject.jpg";
import { useEffect, useState } from "react";
import styles from "./lectures.module.css";
import { useLocation, Link } from "react-router-dom";
import { baseURL } from "../../../Apis";

function Lectures() {
  let temp = [];
  const [courses, setcourses] = useState(() => {
    return null;
  });

  useEffect(() => {
    const fun = async (e) => {
      const response = await fetch(`${baseURL}/user/profile`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });
      const json = await response.json();
      if (json.success) {
        setcourses(json.data.courses);
      }
    };
    fun();
  }, []);

  // calling for chapters of each course
  if (courses) {
    courses.map((course) => {
      return FetchChapter(course._id);
    });
  }

  //After getting courses got respective chapter
  function FetchChapter(id) {
    const fun = async (e) => {
      const response = await fetch(`${baseURL}/course/${id}?queryParam=0`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });
      const json = await response.json();
      json.data.chapters.map((chapter) => {
        return FetchTopic(id, chapter._id);
      });
    };
    fun();
  }

  function FetchTopic(id, chapter_id) {
    const fun = async (e) => {
      const response = await fetch(
        `${baseURL}/course/${id}/?queryParam=1&chapterID=${chapter_id}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );
      const json = await response.json();
      json.data.chapter.topics.map((topics) => {
        topics.subTopics.map((topic) => {
          FetchSubtopic(topic);
        });
      });
    };
    fun();
  }

  function FetchSubtopic(topic) {
    const fun = async (e) => {
      const response = await fetch(`${baseURL}/course/subtopics/${topic._id}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });
      const json = await response.json();
      if (json.contentType == 0) {
        temp.push(topic);
        console.log(temp);
      }
    };
    fun();
  }

  let subjects = [
    {
      subject: "Calculus",
    },
    {
      subject: "Calculus",
    },
  ];

  const [State, setState] = useState([]);
  const location = useLocation();
  const high = Math.ceil(subjects.length / 9);
  const pagenumber = Number(location.pathname.split("/")[2]);

  useEffect(() => {
    console.log(temp); // Why empty
    setState(subjects.slice((pagenumber - 1) * 9, (pagenumber - 1) * 9 + 9));
  }, [pagenumber]);

  return (
    <>
      <div className={styles.container}>
        <p className={styles.heading}>All Notes</p>
        <div className={styles.cardsShow}>
          {State.map((Obj, i) => (
            <div className={styles.cards}>
              <img src={subject} alt="topic" className={styles.img} />
              <div className={styles.lower}>
                <div className={styles.about}>
                  <p className={styles.number}>
                    {i + 1 + (pagenumber - 1) * 9}.
                  </p>
                  <p className={styles.text}>{Obj.subject}</p>
                </div>
                <svg
                  className={styles.icon}
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="feather feather-bookmark"
                >
                  <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
                </svg>
              </div>
              <p className={styles.time}>30mintutes</p>
            </div>
          ))}
        </div>
        <div className={styles.pagination}>
          {/* {console.log(pathname)} */}
          {pagenumber && pagenumber > 1 && (
            <Link to={`/record/${pagenumber - 1}`} className={styles.pageItem}>
              Previous
            </Link>
          )}
          <>
            {[3, 2, 1].map((Obj, i) => (
              <>
                {pagenumber - Obj >= 1 && (
                  <Link
                    to={`/record/${pagenumber - Obj}`}
                    className={styles.pageItem}
                  >
                    {pagenumber - Obj}
                  </Link>
                )}
              </>
            ))}
          </>

          {pagenumber && pagenumber < high && (
            <Link to={`/record/${pagenumber + 1}`} className={styles.pageItem}>
              Next
            </Link>
          )}
        </div>
      </div>
    </>
  );
}

export default Lectures;
